-----------------------------
A-5 Static Single Assignment
-----------------------------

        Now, we are  going to take a  look at the Static  Single Assignment form
        that GCC uses later during optimization.  In SSA form, each variable may
        be assigned at most once. Also,  exactly one assignment of each variable
        dominates every use of the variable.

        In order  to implement SSA, local  variables are suffixed with  a unique
        number which represents the assignment.  For example, two assignments to
        the variable `a' may look like `a_0' and `a_1'.

        Compile the following program (file A-5.c) and observe the dumps.

        Source file : A-5.c
        Compilation : gcc-4.7.2 -c -fdump-tree-cfg -fdump-tree-ssa A-5.c
        View result : vi -O A-5.c.*.cfg A-5.c.*.ssa
        Clear dumps : rm -f A-5.c.* A-5.o

Program
-------

        int main()
        {
            int a, b, c, d;

            d = 10;
            if (c > d) {
                a = 3;
                b = 2;
            } else {
                a = 2;
                b = 3;
            }

            c = a + b;
        }



Questions
---------

        1   Do you notice that each usage of local variable as an operand uses a
            suffix that can be tracked to it's assignment? Why do some variables
            have a suffix `(D)'? 
	    	Answer :- In the .ssa file, each usage of local variable uses a suffix
			  that can be tracked to its assisgnment.
			  The variables which are only declared but not initialized have
			  a suffix "D" in front of them.

        2   Find the point in the CFG in  which the paths of the two assignments
            to variable `a'  and `b' merge. You will notice  that PHI statements
            have  been  introduced.  Can  you   guess  the  syntax  of  the  PHI
            statements? 
	    	Answer :- After the if and else statements end in the CFG, the path
			  of the two assignments to variables a and b will merge.
			  Hence the PHI statments have been introduced.

			  Since it is not possible to determine which of the two 
			  branches will be taken at runtime, we don't know which of
			  a_7 and b_8 or a_5 and b_6 to use during execution. So the 
			  SSA renamer creates a new version a_1 and b_2 which is 
			  assigned the result of merging a_7 a_5 and b_8 b_6. This 
			  PHI node means that one of the operands is to be taken and it 
			  doesn't know which is to be taken. 

        3   Can you think of an example in which a PHI node merges more than two
            versions of a variable?
	    	Answer :- If we have a else-if ladder in the source code then there will
			  be more than 2 versions of the variable created. At that time 			  a PHI node will merge more than two versions of the variable.
			  E.g. # a_4 = PHI <a_1(3), a_2(4), a_3(5) >


